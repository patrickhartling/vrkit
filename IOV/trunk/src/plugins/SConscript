#!python
import os
import glob
import SCons.Util
import SConsAddons.Util as sca_util

pj = os.path.join

Import('*')

def makePlugins(srcDir, instDir):
   plugin_dirs = [d for d in os.listdir(srcDir) if (os.path.isdir(pj(srcDir, d)) and not d.startswith('.'))]
   for plugin_name in plugin_dirs:
      makePlugin(srcDir, plugin_name, instDir)
   
def makePlugin(srcDir, pluginName, instDir):
   plugin_srcs = glob.glob(pj(srcDir, pluginName, '*.cpp'))

   # If there are no source files in the plug-in source directory, do not try
   # to build anything.
   if len(plugin_srcs) > 0:

      plugin_srcs = \
         [src.replace(sca_util.getFullSrcPath(env), '.') for src in plugin_srcs]

      #print "Plugin: ", pluginName
      #print "   srcs:", plugin_srcs
      #print "   defs:", def_files
      lib_name = pluginName

      # We use inst_dir here instead of changing instDir because we do not
      # watch to modify the base installation directory. instDir gets
      # referenced again later, and we need it to be the value that was passed
      # in to this function.
      inst_dir = instDir
      if (optimize != 'yes'):
         inst_dir = os.path.join(instDir, 'debug')

      plugin_lib = plugin_env.SharedLibrary(lib_name, plugin_srcs,
                                            SHLIBPREFIX = '')
      env.Install(inst_dir, plugin_lib)

   def_files = glob.glob(pj(srcDir, pluginName, '*.jdef'))

   if len(def_files) > 0:
      def_files = \
         [d.replace(sca_util.getFullSrcPath(env), '.') for d in def_files] 
      env.Install(inst_paths['definitions'], def_files)

   cur_dir = pj(srcDir, pluginName)
   subdirs = [d for d in os.listdir(cur_dir) if os.path.isdir(pj(cur_dir, d)) and not d.startswith('.')]

   for s in subdirs:
      makePlugins(pj(srcDir, pluginName, s), pj(instDir, s))

src_dir = sca_util.getFullSrcPath(env)
plugin_dirs = [d for d in os.listdir(src_dir) if (os.path.isdir(pj(src_dir,d)) and not d.startswith('.'))]

# Create plugin environment with paths
# to the IOV library we built and installed
plugin_env = baseEnv.Copy()
plugin_env.Append(CPPPATH = inst_paths['include'],
                  LIBPATH = inst_paths['lib'])
plugin_env.Prepend(LIBS = ['iov'])

if GetPlatform() == 'darwin':
   plugin_env['SHLINKFLAGS'] = SCons.Util.CLVar('$LINKFLAGS -bundle')

makePlugins(src_dir, inst_paths['lib_plugin'])
