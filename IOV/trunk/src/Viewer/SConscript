#!python
#
import SConsAddons.Util       # Get the utils
import sys, os, re, string, glob
import os.path
pj = os.path.join
GetPlatform = SConsAddons.Util.GetPlatform;

Import('*')

viewerEnv = build_env.Copy()

boost_options.apply(viewerEnv)

if boost_options.isAvailable():
   viewerEnv.Prepend(CPPPATH = inst_paths['include'],
                     LIBPATH = inst_paths['lib'])

   # XXX: There has to be a better way to do this Mac-specific stuff.
   if platform == 'darwin':
      viewerEnv.Append(LINKFLAGS = ['-Wl,-bind_at_load'])

   # We use automatic linking against the Boost libraries and IOV on Windows.
   if platform != 'win32':
      po_lib = boost_options.getFullLibName('program_options', viewerEnv)
      viewerEnv.Prepend(LIBS = ['iov' + shared_lib_suffix, po_lib])

   appname = 'iov_app'
   iov_app_name = appname + runtime_suffix
   iov_app_srcs = ['iov_app.cpp']
   if platform == 'win32':
      iov_app_srcs.append(viewerEnv.RES('iov_app.rc'))

   iov_app_prog = viewerEnv.Program(iov_app_name, iov_app_srcs)
   viewerEnv.Install(pj(inst_paths['app_base'], 'Viewer'), iov_app_prog)

   # Only install *.jdef files on first pass.
   if 0 == variant_pass:
      jdef_files = ['iov_app.jdef',]
      jconf_files = ['viewer-nav.jconf', 'viewer-vp.jconf']

      viewerEnv.Install(pj(inst_paths['app_base'], 'Viewer'), jconf_files)
      viewerEnv.Install(pj(inst_paths['app_base'], 'Viewer'), jdef_files)

   # This only needs to be done when building against VR Juggler 2.1.21 or
   # newer.
   if platform == 'darwin':
      if hasattr(vrj_options, 'flagpoll_parser') and \
         vrj_options.flagpoll_parser is not None:
         parser = vrj_options.flagpoll_parser
         use_cocoa = parser.callFlagPoll('--get-all-use-cocoa')
         if use_cocoa == 'yes':
            viewerEnv['BUNDLE_APP_NAME']   = 'Viewer'
            viewerEnv['BUNDLE_INFO_PLIST'] = 'src/Viewer/Info.plist'
            viewerEnv['BUNDLE_PKG_INFO']   = 'src/Viewer/PkgInfo'
            release_target = viewerEnv.Alias('bundle',
                                             makeBundle(appname, viewerEnv))
            viewerEnv.Depends(release_target, appname)
else:
   print "WARNING: Cannot build iov_app without Boost.program_options"
