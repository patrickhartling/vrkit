#!python
#
import SConsAddons.Util       # Get the utils
import sys, os, re, string, glob
import os.path
pj = os.path.join
GetPlatform = SConsAddons.Util.GetPlatform;

Import('*')

appname = 'iov_app'

#def installDir(toDir, fromDir, env):
#   if not os.path.exists(toDir):
#      env.Execute(Mkdir(toDir))
#
#   dest_dir = toDir
#   for root, dirs, files in os.walk(fromDir):
#      base = os.path.join(toDir, root.replace(fromDir, ''))
#      for d in dirs:
#         new_dir = os.path.join(base, d)
#         if not os.path.exists(new_dir):
#            env.Execute(Mkdir(new_dir))
#      for f in files:
#         src_file = os.path.join(root, f)
#         env.Install(base, src_file)

def makeBundleCmd(target, source, env):
   import commands

   bundle = 'Viewer'

   cmd = '%s.app' % bundle
#   if os.path.isdir(cmd):
#      import shutil
#      shutil.rmtree('%s.app' % bundle)

   instroot = '%s.app/Contents' % bundle
   macdir = '%s/MacOS' % instroot
   resdir = '%s/Resources' % instroot
   langdir = '%s/en.lproj' % resdir

   path = ''
   for d in instroot.split('/'):
      path = os.path.join(path, d)
      if not os.path.exists(path):
         env.Execute(Mkdir(path))

   if not os.path.exists(macdir):
      env.Execute(Mkdir(macdir))
   if not os.path.exists(resdir):
      env.Execute(Mkdir(resdir))
   if not os.path.exists(langdir):
      env.Execute(Mkdir(langdir))

   env.Install(macdir, str(source[0]))
   env.Install(instroot, 'src/Viewer/Info.plist')
   env.Install(instroot, 'src/Viewer/PkgInfo')

   parser = vrj_options.flagpoll_parser

   app_resources    = parser.callFlagPoll('--get-vrj-app-all-resources')
   app_nib          = parser.callFlagPoll('--get-vrj-app-nib')
   app_info_strings = parser.callFlagPoll('--get-vrj-app-info-strings')

   if app_resources:
      for f in  app_resources.split(' '):
         env.Install(resdir, f)

#   if env.has_key('APP_RESOURCE_DIRS'):
#      for d in  env['APP_RESOURCE_DIRS']:
#         installDir(resdir, d, env)

   if app_nib:
#      installDir(langdir, app_nib, env)
      cmd = 'cp -r %s %s' % (app_nib, langdir)
      commands.getoutput(cmd)

   if app_info_strings:
      env.Install(langdir, app_info_strings)

   if combo['type'] == 'optimized':
      cmd = 'strip -u -r %s/%s' % (macdir, appname)
      commands.getoutput(cmd)

   env.Execute(Chmod('%s/%s' % (macdir, appname), 0755))

def makeBundle(target):
   cmd = env.Command('bundle', appname, makeBundleCmd)
   env.Alias(appname, cmd)

viewerEnv = build_env.Copy()

boost_options.apply(viewerEnv)

if boost_options.isAvailable():
   viewerEnv.Prepend(CPPPATH = inst_paths['include'],
                     LIBPATH = inst_paths['lib'])

   # XXX: There has to be a better way to do this Mac-specific stuff.
   if platform == 'darwin':
      viewerEnv.Append(LINKFLAGS = ['-Wl,-bind_at_load'])

   # We use automatic linking against the Boost libraries and IOV on Windows.
   if platform != 'win32':
      po_lib = boost_options.getFullLibName('program_options', viewerEnv)
      viewerEnv.Prepend(LIBS = ['iov' + shared_lib_suffix, po_lib])

   iov_app_name = appname + runtime_suffix
   iov_app_prog = viewerEnv.Program(iov_app_name, ['iov_app.cpp',])
   viewerEnv.Install(pj(inst_paths['app_base'], 'Viewer'), iov_app_prog)

   # Only install *.jdef files on first pass.
   if 0 == variant_pass:
      jdef_files = ['iov_app.jdef',]
      jconf_files = ['viewer-nav.jconf', 'viewer-vp.jconf']

      viewerEnv.Install(pj(inst_paths['app_base'], 'Viewer'), jconf_files)
      viewerEnv.Install(pj(inst_paths['app_base'], 'Viewer'), jdef_files)

   # This only needs to be done when building against VR Juggler 2.1.21 or
   # newer.
   if GetPlatform() == 'darwin':
      if hasattr(vrj_options, 'flagpoll_parser') and \
         vrj_options.flagpoll_parser is not None:
         parser = vrj_options.flagpoll_parser
         use_cocoa = parser.callFlagPoll('--get-all-use-cocoa')
         if use_cocoa == 'yes':
            release_target = viewerEnv.Alias('bundle', makeBundle(appname))
            viewerEnv.Depends(release_target, appname)
else:
   print "WARNING: Cannot build iov_app without Boost.program_options"
