#!python

# vrkit is (C) Copyright 2005-2007
#    by Allen Bierbaum, Aron Bierbuam, Patrick Hartling, and Daniel Shipton
#
# This file is part of vrkit.
#
# vrkit is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# vrkit is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

Import('*')
env = build_env.Copy()
Export('env')

def makeBundleCmd(target, source, env):
   import commands
   import os.path
   import shutil

   bundle = env['BUNDLE_APP_NAME']

   cmd = '%s.app' % bundle
#   if os.path.isdir(cmd):
#      import shutil
#      shutil.rmtree('%s.app' % bundle)

   instroot = '%s.app/Contents' % bundle
   macdir = '%s/MacOS' % instroot
   resdir = '%s/Resources' % instroot
   langdir = '%s/en.lproj' % resdir

   path = ''
   for d in instroot.split('/'):
      path = os.path.join(path, d)
      if not os.path.exists(path):
         env.Execute(Mkdir(path))

   if not os.path.exists(macdir):
      env.Execute(Mkdir(macdir))
   if not os.path.exists(resdir):
      env.Execute(Mkdir(resdir))
   if not os.path.exists(langdir):
      env.Execute(Mkdir(langdir))

   appname = str(source[0])
   env.Install(macdir, appname)
   env.Install(instroot, env['BUNDLE_INFO_PLIST'])
   env.Install(instroot, env['BUNDLE_PKG_INFO'])

   parser = vrj_options.flagpoll_parser

   app_resources    = parser.callFlagPoll('--get-vrj-app-all-resources')
   app_nib          = parser.callFlagPoll('--get-vrj-app-nib')
   app_info_strings = parser.callFlagPoll('--get-vrj-app-info-strings')

   if app_resources:
      for f in  app_resources.split(' '):
         env.Install(resdir, f)

#   if app_resource_dirs:
#      for d in app_resource_dirs.split(' '):
#         res_subdir = os.path.basename(d)
#         destdir = os.path.join(resdir, res_subdir)
#         if os.path.exists(destdir):
#            shutil.rmtree(destdir)
#         shutil.copytree(d, destdir)

   if app_nib:
      nib_subdir = os.path.basename(app_nib)
      destdir = os.path.join(langdir, nib_subdir)
      if os.path.exists(destdir):
         shutil.rmtree(destdir)
      shutil.copytree(app_nib, destdir)

   if app_info_strings:
      env.Install(langdir, app_info_strings)

   if combo['type'] == 'optimized':
      cmd = 'strip -u -r %s/%s' % (macdir, appname)
      commands.getoutput(cmd)

def makeBundle(target, env):
   cmd = env.Command(target + '-bundle', target, makeBundleCmd)
   env.Alias(target, cmd)

Export('makeBundle')

SConscript(dirs = ['vrkit', 'plugins', 'SlaveViewer', 'Viewer'])
