#!python

# vrkit is (C) Copyright 2005-2007
#    by Allen Bierbaum, Aron Bierbuam, Patrick Hartling, and Daniel Shipton
#
# This file is part of vrkit.
#
# vrkit is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# vrkit is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import glob, os
import os.path
import SConsAddons.Util as sca_util

pj = os.path.join

Import('*')

env = build_env.Copy()
env.Append(CPPPATH = [inst_paths['include']] )    # Need to find the vrkit directory

# Add define since we are building.
env.AppendUnique(CPPDEFINES = ['_VRKIT_BUILD_'])

if ffmpeg_options.isAvailable():
   have_ffmpeg = True
   env.AppendUnique(CPPDEFINES = ['VRKIT_WITH_FFMPEG'])
   ffmpeg_options.apply(env)
elif mingw_ffmpeg.isAvailable():
   have_ffmpeg = True
   mingw_ffmpeg.apply(env)
   env.AppendUnique(CPPDEFINES = ['VRKIT_WITH_FFMPEG'])

   # When building against MinGW stuff, we need to link against libgcc.a and
   # libmingwex.a. Thus, we have to be able to find them.
   if env['mingw']:
      env.Append(LIBPATH = [pj(env['mingw'], 'lib')])
   if env['mingw_gcc_lib']:
      env.Append(LIBPATH = [env['mingw_gcc_lib']])

   # These are added using LINKFLAGS rather than LIBS so that SCons does not
   # append ".lib" to each library name.
   # XXX: Is there a better way to do this?
   env.AppendUnique(LINKFLAGS = ['libavformat.a', 'libavcodec.a',
                                 'libavutil.a', 'libgcc.a', 'libmingwex.a'],
                    LIBS = ['ws2_32.lib'])

   # NOTE: FAAD and x264 are not included here on purpose. The use of those
   # libraries with FFmpeg requires that FFmpeg be licensed under the GPL,
   # which means that vrkit would also have to be licensed under the GPL in
   # order to link against the FFmpeg libraries.
   ffmpeg_deps = ['libz.a', 'libfaac.a', 'libgsm.a', 'libmp3lame.a',
                  'libnut.a', 'libogg.a', 'libtheora.a', 'libvorbis.a',
                  'libvorbisenc.a', 'libxvidcore.a', 'liba52.a', 'libamrnb.a',
                  'libamrwb.a']

   for l in ffmpeg_deps:
      if os.path.exists(os.path.join(mingw_ffmpeg.libDir, l)):
         env.AppendUnique(LINKFLAGS = [l])
elif ffdshow_ffmpeg.isAvailable():
   have_ffmpeg = True
   ffdshow_ffmpeg.verbose = True
   ffdshow_ffmpeg.apply(env)
   env.AppendUnique(CPPDEFINES = ['VRKIT_WITH_FFMPEG_FFDSHOW'])
   # These are added using LINKFLAGS rather than LIBS so that SCons does not
   # append ".lib" to each library name.
   # XXX: Is there a better way to do this?
   env.AppendUnique(LINKFLAGS = ['libavcodec.lib'])

if "win32" == platform:
   # To compile against the FFmpeg libraries with Visual C++, we have to be
   # able to find the C99 inttypes headers. These are bundled with vrkit in
   # the src/vrkit/video/inttypes directory. The build, however, uses the
   # include path relative to the build directory, so we do not include the
   # 'src' component in the path below.
   if have_ffmpeg:
      env.Append(CPPPATH = [pj(inst_paths['include'], 'vrkit', 'video',
                               'inttypes')])

   if env['enable_vfw']:
      env.Append(CPPDEFINES = ['VRKIT_WITH_VFW'])

   if env['enable_dshow']:
      # Add ATL paths to build.
      vc_inst_dir = env['MSVS']['VCINSTALLDIR']
      env.Append(CPPPATH = [pj(vc_inst_dir, 'atlmfc', 'include'),],
                 LIBPATH = [pj(vc_inst_dir, 'atlmfc', 'lib'),])

      # Add the platform sdk for DirectShow.
      psdk = env["platform_sdk"]
      bc_path = pj(psdk, 'Samples', 'Multimedia', 'DirectShow', 'BaseClasses')

      # XXX: Very simple test for platform SDK.
      if os.path.exists(bc_path):
         env.Append(CPPDEFINES = ['VRKIT_WITH_DIRECT_SHOW'])

         if combo['type'] == 'debugrt':
            bc_libdir = 'WIN2000_DEBUG'
         else:
            bc_libdir = 'WIN2000_RETAIL'

         psdk_libdir = pj(psdk, 'lib')
         if combo['arch'] == 'x64':
            psdk_libdir = pj(psdk_libdir, 'amd64')
         env.AppendUnique(CPPPATH = [bc_path, pj(psdk, 'Include')],
                          LIBPATH = [pj(bc_path, bc_libdir), psdk_libdir],
                          LIBS = ['comsuppw.lib', 'strmiids.lib'])

header_path = pj(inst_paths['include'], 'vrkit')

src_files = []
header_files = []
def_files = []
for path, dirs, files in sca_util.WalkBuildFromSource('.',env):
   src_files += [pj(path,f) for f in files if f.endswith('.cpp')]
   header_files += [pj(path,f) for f in files if f.endswith('.h')]
   def_files += [pj(path,f) for f in files if f.endswith('.jdef')]

if platform == 'darwin':
   env.Append(LINKFLAGS = ['-install_name', 'libvrkit.dylib'])

if platform == 'win32':
   vrkit_res = env.RES('vrkit.rc')
   src_files.append(vrkit_res)

vrkit_lib_name = 'vrkit' + shared_lib_suffix
vrkit_lib = env.SharedLibrary(vrkit_lib_name, src_files)

# Install the library, headers, and definitions
env.Install(inst_paths['lib'], vrkit_lib)

# Only install the headers on the first pass.
if 0 == variant_pass:
   env.InstallAs(target = [pj(header_path, h) for h in header_files],
                    source = header_files)
   env.Install(inst_paths['definitions'], def_files)
