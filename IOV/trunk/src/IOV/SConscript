#!python

import glob, os
import os.path
import SConsAddons.Util as sca_util

pj = os.path.join

Import('*')

env = build_env.Copy()
env.Append(CPPPATH = [inst_paths['include']] )    # Need to find the IOV directory

# Add define since we are building.
env.AppendUnique(CPPDEFINES = ['_IOV_BUILD_',])

if ffmpeg_options.isAvailable():
   env.AppendUnique(CPPDEFINES = ['IOV_WITH_FFMPEG',])
   ffmpeg_options.apply(env)

if "win32" == platform:
   env.AppendUnique(CPPDEFINES = ['IOV_WITH_VFW',])
   env.AppendUnique(LIBS = ['Vfw32.lib',])

header_path = pj(inst_paths['include'],'IOV')

src_files = []
header_files = []
def_files = []
for path, dirs, files in sca_util.WalkBuildFromSource('.',env):
   src_files += [pj(path,f) for f in files if f.endswith('.cpp')]
   header_files += [pj(path,f) for f in files if f.endswith('.h')]
   def_files += [pj(path,f) for f in files if f.endswith('.jdef')]

if platform == 'darwin':
   env.Append(LINKFLAGS = ['-install_name', 'libiov.dylib'])

if platform == 'win32':
   iov_res = env.RES('iov.rc')
   src_files.append(iov_res)

iov_lib_name = 'iov'+shared_lib_suffix
iov_lib = env.SharedLibrary(iov_lib_name, src_files)

# Install the library, headers, and definitions
env.Install(inst_paths['lib'], iov_lib)

# Only install the headers on the first pass.
if 0 == variant_pass:
   env.InstallAs(target = [pj(header_path, h) for h in header_files],
                    source = header_files)
   env.Install(inst_paths['definitions'], def_files)
