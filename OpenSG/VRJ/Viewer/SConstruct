#!python
#

# Import the stuff we need
import SCons;
import SConsAddons.Options;   # Get the modular options stuff
import SConsAddons.Options.VRJuggler.VRJ
import SConsAddons.Options.OpenSG
import SConsAddons.Util       # Get the utils
import sys, os, re, string, glob
pj = os.path.join

# Setup base scons options and settings
EnsureSConsVersion(0,96)
SetOption('max_drift',30)           # 30 second drift on MD5 Files
SetOption('implicit_cache',1)
SConsignFile()                      # Store all .sconsign stuff in single file

####  Local Helper methods ###
GetPlatform = SConsAddons.Util.GetPlatform;

def BuildLinuxEnvironment():
   "Builds a base environment for other modules to build on set up for linux"
   env = Environment( ENV=os.environ)

   CXXFLAGS = ['-fmessage-length=0', '-Wall', '-fexceptions', '-Wno-conversion']
   LINKFLAGS = []
   LIBPATH = []

   CXXFLAGS.extend(['-D_DEBUG', '-g', '-fno-inline', '-fno-default-inline'])
   
   env.Append(
      CXXFLAGS    = CXXFLAGS,
      LINKFLAGS   = LINKFLAGS,
      LIBPATH     = LIBPATH
   )

   return env
   
# --- Main Build --- #
help_text = "\n---- Build system ----\n";
env = BuildLinuxEnvironment()
build_dir = "build." + GetPlatform();
   
# ---------- Options ------------ #
options_cache_filename = 'options.cache.' + GetPlatform()
opts = SConsAddons.Options.Options(files = [options_cache_filename, 'options.custom'], 
                                   args= ARGUMENTS);
vrj_options = SConsAddons.Options.VRJuggler.VRJ.VRJ("vapor", "1.1.169", required=True);
opensg_options = SConsAddons.Options.OpenSG.OpenSG("opensg", "1.3.0", required=False)                                                
opts.AddOption( vrj_options )
opts.AddOption( opensg_options )

help_text += opts.GenerateHelpText(env);

# ----- Application Setup ------------ #
if not SConsAddons.Util.hasHelpFlag():
   opts.Update(env)
   opts.Save(options_cache_filename, env)

   # Setup the build environment
   # Add local directory to path and the "root" directory for this project
   env.Append( CPPPATH = ['.', pj('..','..','..')] )
   vrj_options.updateEnv(env)
   opensg_options.updateEnv(env)

   #env.Program('infi_app', ['infi_app.cpp',])   
   src_files = glob.glob('*.cpp')
   print "Src files: ", src_files
   env.Program('infi_app', src_files)
   

Help(help_text);

# end   
