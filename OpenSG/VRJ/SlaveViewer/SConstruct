#!python
#

# Import the stuff we need
import sys
import SCons

# Get the modular options stuff
import SConsAddons.Options as SCAOptions
import SConsAddons.Options.Boost as OptsBoost
import SConsAddons.Options.VRJuggler.VRJ as OptsVRJ
import SConsAddons.Options.OpenSG as OptsOpenSG
import SConsAddons.Util       # Get the utils

import os, re, string, glob
pj = os.path.join

# Setup base scons options and settings
EnsureSConsVersion(0,96)
SetOption('max_drift',30)           # 30 second drift on MD5 Files
SetOption('implicit_cache',1)
SConsignFile()                      # Store all .sconsign stuff in single file

####  Local Helper methods ###
GetPlatform = SConsAddons.Util.GetPlatform

def BuildLinuxEnvironment():
   "Builds a base environment for other modules to build on set up for linux"
   env = Environment( ENV=os.environ)

   CXXFLAGS = ['-fmessage-length=0', '-Wall', '-fexceptions', '-Wunused',
               '-Wno-conversion']
   LINKFLAGS = []
   LIBPATH = []

   if optimize != 'no':
      CXXFLAGS.extend(['-DNDEBUG', '-O2'])
   else:
      CXXFLAGS.extend(['-D_DEBUG', '-g', '-fno-inline', '-fno-default-inline'])

   env.Append(
      CXXFLAGS    = CXXFLAGS,
      LINKFLAGS   = LINKFLAGS,
      LIBPATH     = LIBPATH
   )

   return env

def BuildDarwinEnvironment():
   "Builds a base environment for other modules to build on set up for Darwin"
   global optimize, profile, builders

   CXXFLAGS = ['-fmessage-length=0', '-Wall', '-fexceptions', '-Wunused',
               '-Wno-conversion', '-Ddarwin', '-Wno-long-double']
   LINKFLAGS = ['-Wl,-bind_at_load']

   # Enable profiling?
#   if profile != 'no':
#      CXXFLAGS.extend(['-pg'])
#      LINKFLAGS.extend(['-pg'])

   # Debug or optimize build?
   if optimize != 'no':
      CXXFLAGS.extend(['-DNDEBUG', '-O2'])
   else:
      CXXFLAGS.extend(['-D_DEBUG', '-g', '-fno-inline'])

   return Environment(
      ENV         = os.environ,
      CXXFLAGS    = CXXFLAGS,
      LINKFLAGS   = LINKFLAGS
   )

optimize = ARGUMENTS.get('optimize', 'no')
Export('optimize')

# --- Main Build --- #
help_text = "\n---- Build system ----\n"
if GetPlatform() == 'linux' or GetPlatform() == 'freebsd':
   env = BuildLinuxEnvironment()
elif GetPlatform() == 'mac':
   env = BuildDarwinEnvironment()

# Export symbols for use by SConscript files in subdirectories.
Export('GetPlatform')
Export('env')

if WhereIs('distcc'):
   env.Prepend(CXX = "distcc ", CC = "distcc ")

# ---------- Options ------------ #
options_cache_filename = 'options.cache.' + GetPlatform()
opts = SCAOptions.Options(files = [options_cache_filename, 'options.custom'],
                          args = ARGUMENTS)
boost_options = OptsBoost.Boost("boost", "1.32.0")
vrj_options = OptsVRJ.VRJ("vapor", "1.1.169", required = True)
opensg_options = OptsOpenSG.OpenSG("opensg", "1.4.0", required = True)

Export('boost_options')
Export('vrj_options')
Export('opensg_options')

opts.AddOption(boost_options)
opts.AddOption(vrj_options)
opts.AddOption(opensg_options)

help_text += opts.GenerateHelpText(env)

# ----- Application Setup ------------ #
if not SConsAddons.Util.hasHelpFlag():
   opts.Update(env)
   opts.Save(options_cache_filename, env)

   # XXX: Hack around SConsAddons.Options.OpenSG.OpenSG not letting us provide
   # extra arguments to osg-config.  (Of course, if osg-config wasn't totally
   # braindead on Mac OS X, this wouldn't be such a problem.)
   if GetPlatform() == 'mac':
      mac_opts = os.popen(opensg_options.osgconfig_cmd + " --cflags System").read()
      opensg_options.found_cflags = mac_opts.strip().split(" ")

   # Add on the options by default
   vrj_options.updateEnv(env)
   opensg_options.updateEnv(env)
   boost_options.updateEnv(env)

   src_dir = SConsAddons.Util.getFullSrcPath()

   env.Append(CPPPATH = ['.', pj('..', '..', '..')])

   if GetPlatform() == 'mac':
      env.Append(LIBS = ['boost_program_options-1_33'])
   else:
      env.Prepend(LIBS = [boost_options.buildFullLibName('program_options')])

   env.Program('slaveViewer', glob.glob(pj(src_dir, '*.cpp')))

Help(help_text)

# end
