#!python

# vrkit is (C) Copyright 2005-2007
#    by Allen Bierbaum, Aron Bierbuam, Patrick Hartling, and Daniel Shipton
#
# This file is part of vrkit.
#
# vrkit is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# vrkit is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import glob
import SCons.Util
import SConsAddons.Util as sca_util

pj = os.path.join

Import('*')

def makePlugins(srcDir, instDir):
   plugin_dirs = [d for d in os.listdir(srcDir) if (os.path.isdir(pj(srcDir, d)) and not d.startswith('.'))]
   for plugin_name in plugin_dirs:
      makePlugin(srcDir, plugin_name, instDir)

def makePlugin(srcDir, pluginName, instDir):
   plugin_srcs = glob.glob(pj(srcDir, pluginName, '*.cpp'))

   # If there are no source files in the plug-in source directory, do not try
   # to build anything.
   if len(plugin_srcs) > 0:

      plugin_srcs = \
         [src.replace(sca_util.getFullSrcPath(env), '.') for src in plugin_srcs]

      #print "Plugin: ", pluginName
      #print "   srcs:", plugin_srcs
      #print "   defs:", def_files

      lib_name = pluginName

      # We use inst_dir here instead of changing instDir because we do not
      # watch to modify the base installation directory. instDir gets
      # referenced again later, and we need it to be the value that was passed
      # in to this function.
      inst_dir = instDir
      if combo['type'] == 'debug':
         inst_dir = os.path.join(instDir, 'debug')

      plugin_lib = plugin_env.SharedLibrary(lib_name, plugin_srcs,
                                            SHLIBPREFIX = '')

      # On Windows, we only want to install the .dll file for the plug-in
      # case.
      if platform == 'win32':
         plugin_env.Depends(plugin_lib,
                            os.path.join(inst_paths['lib'],
                                         'vrkit%s.lib' % shared_lib_suffix))
         plugin_lib = [p for p in plugin_lib if str(p).endswith('.dll')]

      plugin_env.Install(inst_dir, plugin_lib)

   def_files = glob.glob(pj(srcDir, pluginName, '*.jdef'))

   # Only install *.jdef files on first pass.
   if 0 == variant_pass:
      if len(def_files) > 0:
         def_files = \
            [d.replace(sca_util.getFullSrcPath(env), '.') for d in def_files]
         env.Install(inst_paths['definitions'], def_files)

   cur_dir = pj(srcDir, pluginName)
   subdirs = [d for d in os.listdir(cur_dir) if os.path.isdir(pj(cur_dir, d)) and not d.startswith('.')]

   for s in subdirs:
      makePlugins(pj(srcDir, pluginName, s), pj(instDir, s))

src_dir = sca_util.getFullSrcPath(env)
plugin_dirs = [d for d in os.listdir(src_dir) if (os.path.isdir(pj(src_dir,d)) and not d.startswith('.'))]

# Create plugin environment with paths to the vrkit library we built and
# installed.
plugin_env = build_env.Copy()
plugin_env.Append(CPPPATH = inst_paths['include'],
                  LIBPATH = inst_paths['lib'])

# On Windows, we use automatic linking.
if platform != 'win32':
   plugin_env.Prepend(LIBS = ['vrkit' + shared_lib_suffix])

# Add define since we are building.
plugin_env.AppendUnique(CPPDEFINES = ['_VRKIT_PLUGIN_BUILD_',])

if platform == 'darwin':
   plugin_env['SHLINKFLAGS'] = SCons.Util.CLVar('$LINKFLAGS -bundle')

makePlugins(src_dir, inst_paths['lib_plugin'])
